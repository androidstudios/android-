1、Activity的生命周期
onCreate()
onStart()
onResume()
onPause()
onStop()
onDestroy()

Activity A 启动另一个Activity B
第一个onPause() → 第二个onCreate() onStart() onResume() → 第一个onStop()

Activity A 启动后点击Home键再回到应用
onPause(A)->oStop(A)->onRestart(A)->onStart(A)->onResume(A)

2、Activity 的四种形态
Runing   此时Activity 处在Activity栈的最顶层, 处于屏幕最前方，可与用户进行交互 .此时处于运行状态；
Paused   Activity失去了焦点,不可与用户交互, 但是所有的信息,变量都还保持着；
Stopped  该Activity完全被另一个Activity覆盖,此时它不可见,但是信息,变量都还保持着；
Killed   Activity被系统回收或者关闭

3、Activity 异常情况下的生命周期
发生异常之后   onSaveInstanceState
重启之后       onRestoreInstanceState

4、什么时候Activity单独走onPause()而不走onStop()
当Activity被一个透明或者半透明的Activity覆盖的时候不会走onStop()

5、什么是Activity任务栈？
任务栈是一种用来放置Activity实例的容器。
新启动的Activity会被压入启动它的那个Activity的栈中并且显示它。

6、activity启动模式
standard：标准模式，每次都会在活动栈中生成一个新的Activity实例。
singleTop：栈顶复用，如果Activity实例已经存在栈顶，那么就不会在活动栈中创建新的实例。比较常见的场景就是下拉通知栏点击通知不跳转
singleTask：栈内复用，如果Activity实例在当前栈中已经存在，就会将当前Activity实例上面的其他Activity实例都移除栈。

7、为什么需要启动模式？
为了防止多次创建同一个Activity 实例

8、Activity 和Activity 之间的通信
Intent跳转时携带数据
借助类的静态变量来实现
使用SharedPreference共享数据，Editor编辑数据

9、Activity 和Service之间的通信
Intent跳转时携带数据
通过bindService启动服务，可以在ServiceConnection的onServiceConnected()中获取到Service的实例来调用service的方法
通过广播方式

10、Activity 和Fragment之间的通信
Fragment创建时通过setArgument()传值

11、Activity的显隐式跳转有什么区别
显式跳转：指明“始发地”和“目的地”
隐式跳转：在new Intent()中填写参数，该参数对应目的地的清单文件里action属性的值

----------------------------------------------------------------------------------------------------------

1、广播有哪几类
普通广播   若注册了的广播接收者与发送者匹配则会接收,不支持接收者修改
系统广播   只要涉及到手机的基本操作，都会发出相应的广播
有序广播   先接收的广播接收者可以对广播进行截断或者修改，即后接收的广播接收者不再接收到此广播或者接收到修改的广播
App应用内广播   发送广播时指定该广播接收器所在的包名，此广播将只会发送到此包中的App内与之相匹配的有效广播接收器中

2、广播接收器静态注册与动态注册的区别
动态注册必须在程序启动之后才能接收到广播，而静态注册程序未启动也能接收到广播,例如手机开机；
动态注册在代码中完成，而静态注册在AndroidManifest.xml文件里注册。

3、请描述一下广播BroadcastReceiver的理解
BroadcastReceiver是一种全局监听器，用来实现系统中不同组件之间的通信

----------------------------------------------------------------------------------------------------------------

1、ContentProvider是什么
ContentProvider翻译是内容提供者，负责线程间通信并对线程访问到的内容进行增删改查，一般需要管理类ContentResolver

2、内容提供者的原理
B程序通过ContentResolver调用A程序的ContentProvider获取到数据，
操作完成之后再通过ContentResolver返回给A程序

3、说说ContentProvider、ContentResolver、ContentObserver 之间的关系
ContentProvider：实现各个应用间的数据共享以及数据操作
ContentResolver：内容解析者，用于获取内容提供者提供的数据，通过ContentResolver.notifyChange(uri)发出消息
ContentObserver：内容监听者，可以监听数据的改变

------------------------------------------------------------------------------------------------------------------

1、Service和线程的区别
Thread 是程序执行的最小单元，可以执行异步的操作；
Service是运行在线程上的

2、Service的生命周期
onCreate()
onStartCommand()      (onBind   onUnbind)
onDestroy()

3、Service和线程池的区别
Service的优点是安卓原生自带，优先级高后台不易被杀死；缺点是运行效率不高，受限于接口使用不够灵活
线程池的优点是运行效率高和使用灵活；缺点是多线程实现不方便

4、IntentService使用方法
继承IntentService
重写onHandleIntent()
启动服务startService()

5、IntentService和Service的区别
Service不是单独的线程，所以不能进行耗时操作；IntentService可以重写onHandleIntent()并执行耗时操作
(耗时操作在onStartCommand()中执行可能发生Application Not Response)

6、如何保证 Service 不被杀死 ？ 
onStartCommand()返回START_STICKY；
在 AndroidManifest.xml 文件中对 intent-filter 可以通过 android:priority = "1000"这个属性设置最高优先级；
在 onDestroy 方法里重启 Service；
将 APK 安装到/system/app，变身为系统应用

7、用过哪些系统 Service ？
ACTIVITY_SERVICE：管理应用的状态
POWER_SERVICE：电源服务
ALARM_SERVICES：闹钟服务
NOTIFICATION_SERVICES：通知栏服务

8、了解 ActivityManagerService 吗？发挥什么作用
负责四大组件的启动、切换、调度及应用进程的启动、切换、调度

9、匿名Binder Server
匿名binder必须是建立在一个实名binder之上的，实名binder就是在service manager中注册过的；
首先client和server通过实名binder建立联系，然后把匿名binder通过这个实名通道“传递过去”

--------------------------------------------------------------------------------------------------------------

1、Fragment加载到Activty的两种方式
静态加载
创建一个Fragment的Layout文件
创建一个适配类继承自Fragment，然后重写onCreateView方法
在main布局文件中声明fragment


动态加载
创建一个Fragment的Layout文件
创建一个适配类继承自Fragment，然后重写onCreateView方法
通过FragmentManage和FragmentTransaction添加、移除

2、FragmentPagerAdapter与FragmentStatePagerAdapter
当切换页面的时候，
FragmentPagerAdapter不会remove掉之前的fragment而只是detach，并不会回收内存，当需要加载的页面较少时使用；
FragmentStatePagerAdapter会remove之前加载的fragment从而将内存释放掉，当需要加载的页面较多时使用

3、Fragment的生命周期
onAttach()
onCreate()
onCreateView()
onActivityCreated()
onStart()
onResume()
onPause()
onStop()
onDestroyView()
onDestroy()
onDetach()

4、Fragment的通信
在Fragment中调用所在Activity中的方法：通过getActivity()获取Activity的实例
在Activity调用Fragment的方法：Activity有Fragment的实例
在Fragment中调用另外一个Fragment的方法：getActivity().getSupportFragmentManager().findFragmentByTag("mainFragment")

5、Fragment的切换方式
add()：onAttach() → onResume()

replace()&remove()：老的onPause() → onDetach()，新的执行add()

hide()&show()：调用onHiddenChanged()改变显示状态

detach()&attach()：老的onPause() → onDestroyView()，新的执行add()

6、Fragment的懒加载
Fragment调用add()、show()或者hide()方法后，setMaxLifecycle()

-----------------------------------------------------------------------------------------------------------------

1、Handler的使用
sendMessage(Message)
post(Runnable)   （因为Message里有Runnable属性，所以还是发送一个Message）

2、Handler内部机制
Message：消息对象，就是记录消息信息的类。
MessageQueue：消息队列，以链表的方式存放Message对象，一个线程只能有一个MessageQueue
Looper：MessageQueue的管理对象，也是只能存在一个
Handler：消息的处理者，通过sendMessage(Message)把Message对象添加到MessageQueue中

3、Handler引起的内存泄漏及解决方法

内存泄漏：
如果在任务没有执行完时，Activity被关闭了，
但是子线程没有执行完，子线程会引用Handler，而Handler又引用了Activity，
导致Activity对象无法被GC回收，就出现了内存泄漏。

解决方法：
把Handler改为静态内部类：因为静态内部类不会有对外部类的引用，所以不会导致内存泄露
在Handler添加对Activity的弱引用：因为Handler是静态内部类，所以需要一个弱引用

4、如何使用Handler让子线程与子线程之间进行通信？
在一个子线程中创建一个Handler，它的回调就在此子线程中，然后在另一个子线程中使用Looper调用此handler发送消息就可以了

5、HandlerThread的使用方法
创建一个HandlerThread
调用start()启动
调用Looper的quit()或quitSafely()退出循环

6、HandlerThread机制原理
在Thread中封装了Looper对象

7、Handler、Thread和HandlerThread的差别
Handler：线程间通信的桥梁
Thread：普通线程
HandlerThread：在HandleThread的run()方法中调用Looper.prepare().loop()开启Loop循环，循环从消息队列中获取消息并交由Handler处理；适合本地IO读写，网络操作容易阻塞

8、Message可以如何创建？哪种效果更好，为什么？
Message m = new Message
Message m = Message.obtain
Message m = mHandler.obtainMessage()
后两者效果更好，后两者是在消息池中取出一个 Message 实例，避免产生过多 Message 实例

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

1、事件列的执行流程
DOWN → MOVE → UP
Cancel会让move和up事件失效

2、事件分发的本质
将点击事件（MotionEvent）传递到某个具体的View以及处理的整个过程

3、事件在哪些对象之间进行传递？
Activity：控制器，统筹视图的添加和展示
ViewGroup：含有多个子View，是布局的父类
View：UI组件的基本类型，是组件的父类

4、事件分发过程由哪些方法协作完成？
dispatchTouchEvent()：传递点击事件
onInterceptTouchEvent()：拦截点击事件，返回值为false事件继续往下传递，为true则终止
onTouchEvent()：处理点击事件

5、事件分发的顺序
Activity → ViewGroup → View

6、OnTouchListener，onTouchEvent，onClickListener执行顺序
DOWN：OnTouchListener → onTouchEvent
UP：OnTouchListener → onTouchEvent → onClickListener

7、相对布局中View重叠时事件分发解决？
在布局文件中将clickable设置为true可以实现在onTouchEvent中对事件进行拦截

8、多点触摸的事件如何处理？
手指触摸的顺序通过 index 区分，手指的区分通过 id 来区分
接力型：同一时刻只有一个最新的 pointer 起作用
配合型：所有触摸到 View 的 pointer 共同起作用
各自为战型：各个 pointer 做不同的事互不影响

--------------------------------------------------------------------------------------------------------------------

1、RecyclerView的布局管理器
线性布局管理器(LinearLayoutManager)
网格布局管理器(GridLayoutManager)
瀑布流布局管理器(StaggeredLayouManager)

2、ListView和RecyclerView的区别
布局效果：ListView只有一个纵向效果，RecyclerView可以在LayoutMananger中设置线性布局，表格布局，瀑布流布局
空数据处理：ListView有setEmptyView()处理Adapter中数据为空的情况，RecyclerView没有这个API
局部刷新：ListView中全局刷新是notifyDataSetChanged()，
RecyclerView中可以局部刷新例如notifyItemChanged()
Item点击事件：ListView添加HeaderView与FooterView后可能会抛出数组越界，RecyclerView中可以使用addOnItemTouchListener()

3、WebView的基本用法
先在布局文件中定义一个WebView控件，然后在activity中调用loadUrl()方法访问网址

4、WebView的工具类WebSettings、WebViewClient、WebChromeClient
WebViewClient主要帮助WebView处理各种通知、请求事件；
WebChromeClient主要辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等

5、js调用Android的方法
WebView的JavascriptInterface
WebViewClient.shouldOverrideUrlLoading()
WebChromeClient.onConsoleMessage()
WebChromeClient.onJsPrompt()

6、Android WebView缓存机制和性能优化
缓存机制：浏览器缓存、Web SQL DataBase、IndexedDB、AppCache
预加载：预加载数据、预加载WebView
离线包：常用的静态资源文件打包后下发到客户端

7、属性动画、帧动画、补间动画三者区别
补间动画：
优点：支持平移、旋转、缩放、不透明度，相对于逐帧动画来说，补间动画更为连贯自然
缺点：当平移动画执行完停在最后的位置，结果焦点和点击事件还在原来的位置

帧动画：
优点：制作简单，用于生成连续的Gif效果图
缺点：效果单一，逐帧播放需要很多图片

属性动画：
优点：通过set和get改变的控件的属性，即使位置发生变化也不会影响监听事件、点击事件之类的属性
缺点：向下兼容问题

8、Android中的布局
线性布局(LinearLayout)：分为水平布局和垂直布局，通过layout_weight权重属性控制控件的大小

网格布局(GridLayout)：以行列单元格的形式展示内部控件排列

表格布局(TableLayout)：以行和列的形式对控件进行管理，每一行是一个TableRow对象，每个子控件占一列

约束布局(ConstraintLayout)：解决了布局嵌套过多的问题，可以用相对定位、角度定位、边距、尺寸约束控制组件

相对布局(RelativeLayout)：按照组件之间的相对位置来进行布局，比如某个组件在另一个组件的上，下，左，右

帧布局(FrameLayout)：为每个控件创建一个空白区域，称为一帧，组件默认在左上角并且会重叠

绝对布局(AbsoluteLayout)(过时)

9、View绘制的流程？
measure(测量)->layout(布局)->draw(绘制)
OnMeasure()：测量视图大小
OnLayout()：确定 View 的位置
OnDraw()：绘制视图

10、Android的各种drawable讲解
ColorDrawable（颜色drawable）：固定颜色
GradientDrawable（坡度drawable）：渐变区域
BitmapDrawable（比特drawable）：可以设置对齐方式
NinePatchDrawable（九宫格drawable）：为了保持图片分辨率
InsetDrawable（内嵌drawable）：嵌入到另一个drawable内部
ClipDrawable（修剪drawable）：类似于进度条
ScaleDrawable（规模drawable）：缩放操作
RotateDrawable（旋转drawable）：旋转操作
AnimationDrawable（动画drawable）：一帧一帧的播放
LayerDrawable（层叠drawable）：每个drawable都处于不同的层
LevelListDrawable（等级drawable）：管理一组drawable

11、AlertDialog,popupWindow的区别
Popupwindow在显示之前一定要设置宽高，Dialog无此限制
Popupwindow默认不会响应系统返回，Dialog按下返回会消失
Popupwindow没有标题，Dialog有标题
Popupwindow点击背景不会消失，Dialog点击背景会消失

12、布局优化
善用标签include，include标签常用于将布局中的公共部分提取出来
善用标签merge，merge可以用来合并布局
善用标签ViewStub，推迟创建对象、延迟初始化从而提高性能、节省内存
善用ConstaintLayout，避免了过多的嵌套

-------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------

1、强指针 SP(strong pointer) 弱指针 WP(weak pointer)
强指针：通过引用计数计算一个对象有多少使用者，如果没有引用，则该对象自动销毁
弱指针：弱指针仅仅记录该对象的地址，可以通过wp类所提供的promote()方法将弱指针升级为强指针

2、进程间的数据传递载体Parcel
Parcel本质上就是一个Serialize，在Activity间使用Intent传递数据的时候，可以通过Parcelable机制传递复杂的对象

3、Parcelable和Serializable的区别和比较
Serializable是Java的实现方式,序列化时会产生大量的临时变量，实现方式简单；Parcelable是Android提供的方式,效率高
存储到设备或者网络传输上选择Serializable；内存序列化上选择Parcelable

4、AsyncTask的使用步骤
创建 AsyncTask 子类然后根据需求实现核心方法
创建 AsyncTask子类的实例对象
调用execute()从而执行异步线程任务

5、AsyncTask机制原理
AsyncTask是对线程池和Handler的封装，任务只能执行一次，任务可以取消，默认串行执行

6、AsyncTask注意事项
AsyncTask适合处理短时间的操作

7、Gson与FastJson比较
Gson功能全面，性能比FastJson略低；FastJson有独创的算法，解析速度是json库里最快的

8、XML各种解析方式对比DOM、SAX、PULL解析器优劣对比
DOM：通用性强，将XML文件读取到内存中遍历XML树，不适合移动设备
SAX：解析速度快并且占用内存少，不需要解析整个XML文件，采用事件驱动
PULL：和SAX类似，也是事件驱动，但是PULL事件返回的是数值类型，适合移动设备

9、SharedPreferences数据存储的apply()和commit()区别
apply方法提交时先写入内存，然后写入磁盘；commit方法是直接写入磁盘

10、Intent传值和 Bundle传值的区别
intent添加值和取值需要多次，intent添加bundle只要一次

11、app冷启动和热启动的区别
冷启动：app被后台杀死后再打开
热启动：app在后台运行时再次打开
暖启动：app的Activitie被销毁但应用信息还在内存

12、应用冷启动过程分析和优化方案
启动过程：
加载并启动应用 → 显示一个空白的启动窗口 → 创建进程 → 初始化应用中的对象 → 启动UI线程 → 创建Activity → 计算Layout → 绘制视图

优化方案：
通过主题设置，不显示启动时的白屏背景

13、Application Context和Activity Context的异同
Context是个抽象类；
Context子类为ContextIml（具体实现类）和ContextWrapper（上下文功能包装类）；
ContextWrapper有三个子类，分别是ContextThemeWrapper（Activity的父类）、Service和Application

同：Activity、Service、Application都是继承自ContextWrapper（上下文功能的封装类）
异：Activity.this返回的是当前Activity的实例；getApplicationContext()返回的对象是项目的实例

14、Activity 与 Window 与 View 之间的关系
Activity使用了一种设计模式叫模板方法模式，让Activity管理Window和View

15、进程间通信方式
Bundle：三大组件都支持Intent中传递Bundle数据的，只能支持基本类型和对象
文件共享：两个进程通过读/写同一个文件通信，不适合高并发场景
AIDL：底层通过Binder实现，可以一对多、即时通信、高并发、需要做线程同步
Messenger：底层由AIDL实现，可以一对多、即时通信、不支持高并发
ContentProvider：底层实现是Binder，可以一对多、只能增删改查
Socket：通过网络传输，可以一对多、高并发

16、Android之内存泄露、内存溢出、内存抖动分析
内存泄露：分配内存使用完毕后没有释放，造成内存占用
内存溢出：程序申请的内存空间超出了系统最大值
内存抖动：在短时间内有大量的对象被创建或者被回收

17、内存优化策略
关闭不必要的Service；
使用Android定制的容器，比如ArrayMap代替HashMap；
避免使用抽象类，抽象类会产生额外的代码；
避免内存抖动；
使用编译时注解代替运行时注解，编译时注解占体积，运行时注解占内存和运行速度；
谨慎使用第三方库，因为会导致Apk体积的增大和内存开销；
使用约束布局，减少层次嵌套；

18、Android 平台的虚拟机 Dalvik
Dalvik 是 Google 公司设计的，也叫做DVM；
Dalvik 基于寄存器（中央处理器的组成部分），而JVM 基于栈（作用是在线程里保存变量）；
每个应用程序都有自己的DVM，每个应用程序都有一个唯一的 Linux 用户ID；
JAVA 编译器编译→Android SDK转换为 .dex 文件→DVM 执行;
Android4.4 引入 ART（AndroidRuntime） 模式，性能提升、耗电量低、占用内存更少，但是需要的存储空间变大、安装时间变长

19、Android 中的缓存机制
Bitmap 的缓存：缓存图片
内存缓存：在LruCache类里使用一个 LinkedHashMap 的强引用保存最近使用的对象
磁盘缓存：空间换时间的策略
SQLite缓存：存放到数据库
文件缓存：存储在文件中

20、Android 中图片的三级缓存策略
内存作为一级缓存→本地作为二级缓存→网络加载作为三级缓存

21、mvc、mvp和mvvm
mvc（数据、View、Activity）：View将操作反馈给Activity，Activitiy去获取数据，数据通过观察者模式刷新给View,缺点是activity很大、view和数据耦合严重
mvp（数据、View、Presenter）：View将操作给Presenter，Presenter去获取数据，数据获取好了返回给Presenter，Presenter去刷新View，缺点是接口多、Presenter很大
mvvm（数据、View、ViewModel）：View将操作给ViewModel，ViewModel去获取数据，数据和界面绑定了，数据更新界面更新，优点是一个view对应一个viewModel

22、怎么避免 ANR（Application Not Responding）
避免在 activity 里面做耗时操作；
避免在 onReceiver 里面做过多操作
避免在 Intent Receiver 里启动一个 Activity

23、Android程序运行时权限与文件系统权限的区别
运行时权限，是对系统上的某个 app 的访问权限；
文件的系统权限分为只读和更改

24、Android与服务器交互的方式中的对称加密和非对称加密
对称加密，就是加密和解密数据都是使用同一个 key；
非对称加密，加密和解密是使用不同的 key

25、Android的系统体系结构
Linux Kernel：这一层负责驱动程序
Android Runtime：Android Runtime里的Core Libraries就相当于java的JDK
Liberaries：Android的库文件
Application Framework：应用程序的框架
Application：我们开发的App

26、Runtime类freeMemory()、totalMemory()、maxMemory()详解
maxMemory()：返回操作系统的最大内存
totalMemory()：返回JVM已占用的内存
freeMemory()：返回JVM的空闲内存量
























